import csv
import math #need of square root
import copy

'Define the normalize function. We can move this to wherever.'
def normalize(minimum, maximum, value):
	return ((value - minimum)/(maximum - minimum))

def dist(sampleList, testList):
	result = 0
	for x, row in enumerate(sampleList):
		result += abs((sampleList[x] - testList[x+2]) ** 2)
	result = math.sqrt(result)
	return result

def average(values):
	avgList = [[0] * len(iterator) for i in classNames]
	totalList = [[0] * len(iterator) for i in classNames]
	countList = [0] * len(classNames)

	for i, item in enumerate(values):
		print('i: ', i)
		for j in iterator:
			print('j: ', j)
			totalList[int(values[i][1])][j-2] += values[i][j]		
		countList[int(values[i][1])] += 1

	for i, subList in enumerate(totalList):
		print('i: ', i)
		for j in iterator:
			print('j: ', j)
			avgList[i][j-2] = (totalList[i][j-2] / countList[i])
	
	return avgList

'Need to change this to accept an arguemnt'
fin = open('iris.csv', 'r')
fout = open('iris.cv', 'w')

reader = csv.reader(fin)

'header is the first line in the file'
header = reader.__next__()
print('Header: ', header)

'An iterator that we will use to get all the classificationsi in the header'
iterHeader = iter(header)

'Get the first value in the header since it is the database'
database = next(iterHeader)

'A list to hold the different classification'
classNames = list()

'Take all the classes and put the name in a string list'
for classification in iterHeader:	
	seperated = classification.split(sep='=')
	classNames.append(seperated[1])

print('classNames: ', classNames)

'Get the labels into a list'
labels = reader.__next__()
print('Labels: ', labels)

'''*Should* give us a list of zeroes equal to the number of labels-2
Since we don't need the sample number or class for normalizing'''
minimum = [0] * (len(labels) - 2)
maximum = [0] * (len(labels) - 2)

'Iterator to go through each column so we can get min/max values'
iterator = range(2, len(labels))

'Get all the values'
valuesReader = csv.reader(fin)

values = list()

'Convert all the values from strings to floats'
for temp in valuesReader:
	temp = [ float(i) for i in temp]
	values.append(temp)

#############################################################################
test = []

#print('values: ', values)

for k, thing in enumerate(values):
	test = values.pop(k)
	normalTest = copy.deepcopy(test)
	normalList = copy.deepcopy(values)

	'''Initialize the minimum and maximum arrays with
	the first row'''
	for i in iterator:
		minimum[i - 2] = values[0][i]
		maximum[i - 2] = values[0][i]


	'''Go through the rest of the file to find the minimum and
	maximum values for each column'''
	for row in normalList:
		for i in iterator:
			if row[i] < minimum[i - 2]:
				minimum [i - 2] = row[i]
			if row[i] > maximum[i - 2]:
				maximum [i - 2] = row[i]
		
	#print('maximum: ', maximum)
	#print('minimum: ', minimum)

	'Go through the whole list again and normalize the values'	
	for i, rowValues in enumerate(normalList):
		for j in iterator:
			normalList[i][j] = normalize(minimum[j-2], maximum[j-2], rowValues[j])	
	for i in iterator:
		normalTest[i] = normalize(minimum[i-2], maximum[i-2], normalTest[i]) 


	values.insert(k,test)

	#for ben in normalList:
		#print('normalList: ', ben)

	centroid = average(normalList) #awesome
	
	best = 1000000
	
	print('k: ', k)
	
	for yep,myClass in enumerate(centroid):
		result = dist(myClass, normalTest)	
		if(result < best):
			#print('result: ', result)
			best = result
			bestClass = yep

	print('bestClass: ', bestClass)
	bestClass = 0

	#print('normalTest: ', normalTest)
	#print(centroid)
print('Averages: ', average(values))

fin.close()
fout.close()
#2) We need to put this in a loop
#4) Modulize our code?
